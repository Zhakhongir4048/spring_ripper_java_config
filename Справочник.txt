26.11.2003 - XmlBeanDefinitionReader, появилась возможность настраивать context с помощью XML,
мы в XML прописываем бины и из этого XMl поднимаем context, соответственно против этого работает.
Для того чтобы всё это заработало нужен XmlBeanDefinitionReader,
он является внутренним компонентом Spring-а, который сканирует Xml, всё что там пишем, переводит в BeanDefinition.
BeanDefinition такие объекты, которые хранят информацию про бины.
Для того чтобы всё настраивать через xml обязательно делать сеттеры.
Если вы сделали просто field, setter не поставили, с точки зрения xml Spring - это просто не property,
он всё равно попытается через Reflection сеттер вызвать, его нет, всё упадёт.
ClassPathXmlApplicationContext анализируется и сканируется XmlBeanDefinitionReader.
BeanFactory - отвечает за создание и хранение всех объектов, которые singleton.
В xml мы прописываем bean из какого-то класса, после этого, когда мы поднимаем context,
приходит XmlBeanDefinitionReader, считывает из этого xml все декларации бинов, и создаёт
Map<String, BeanDefinition> beanDefinitionMap = new ConcurrentHashMap<>(256);
После того как эти BeanDefinition созданы, BeanFactory начинает по ним работать, создаёт из наших классов
объекты и все бины складывает в container. Если bean является singleton, то по умолчанию он создаётся изначально,
как только поднимается context. По умолчанию все singleton сразу создаются и складываются в container, а все
prototype создаются тогда, когда они нужны. Кто-то запросил prototype, в этот момент Spring его создал,
настроил, отдал и забыл про него.
Для singleton destroy метод будет работать, потому, что в тот момент, когда context закрывается, spring
проходит по всем бинам, находит их destroy методы и запускает, а prototype он нигде не хранит, для него
destroy метод никогда не работает.
__________________________________________________________________________________________________________________________
BeanPostProcessor - позволяет настраивать наши бины до того, как они попадают в контейнер
Все бины проходят через BeanPostProcessor в момент создания, тут задействован паттерн Chain Of Responsibility
(Цепочка обязанностей).
RetentionPolicy по умолчанию CLASS.
SOURCE - говорит о том, что данная аннотация видна исключительно в SOURCE-ах, когда вы компилируете, в байт-код уже
ничего видно не будет. @Override
CLASS - аннотация в байт-код попасть должна, но при этом, через Reflection, в RUNTIME вы её считать не сможете, её
там не будет. Это нужно для байт-кода instrumentation,
RUNTIME - видны в RUNTIME, через Reflection можете считать
У этого интерфейса 2 метода:
default Object postProcessBeforeInitialization(Object bean, String beanName) вызывается до init метода
default Object postProcessAfterInitialization(Object bean, String beanName) вызывается после init метода
init method
Есть разные способы прописать для бина
init-method
afterPropertiesSet
@PostConstruct
XmlBeanDefinitionReader сканирует Xml, делает Map, затем BeanFactory вытаскивает BeanPostProcessor-ы из
BeanDefinition, создал их и положил в сторонку.
Новый класс, который сгенерируется налету есть 2 варианта:
1) либо он должен наследовать от оригинального класса и переопределять его методы, добавляя туда нужную логику (CGLIB)
2) либо он должен реализовывать те же самые интерфейсы (Dynamic Proxy)
Spring всегда предпочитает идти через интерфейсы. Spring Aspect нужно сделать Proxy на какой-то объект, он смотрит,
есть ли у него интерфейсы, если да, то идёт через Dynamic Proxy, если нет, то через CGLIB
Те BeanPostProcessor-ы которые что-то в классе меняют, они это должны делать не на этапе postProcessBeforeInitialization,
а на этапе postProcessAfterInitialization. PostConstruct всегда работает на оригинальный метод, до того как все Proxy
накрутились на него!
Proxy.newProxyInstance создаёт объект из нового класса, который сгенерирует он сам же налету.
newProxyInstance -
принимает ClassLoader, при помощи его класс, который сгенерируется налету, загрузится в Heap.
Список интерфейсов, должны реализовывать тот класс, который сгенерируется налету.
invokeHandler, некий объект, который будет инкапсулировать логику, которая попадёт во все методы класса, которые
сгенерируются налету.
_______________________________________
ApplicationListener
ContextStartedEvent - это значит, что context начал построение своё, а не значит что построился.
ContextStoppedEvent
ContextRefreshedEvent - когда заканчивает своё построение, делает всегда refreshed
ContextClosedEvent
Listener умеет слушать context Spring, все ивенты, которые с ним происходят.
Из любого ивента можно вытащить контекст.
Если singleton определить как @Lazy, он по умолчанию не будет создаваться в контейнере.
Он будет создаваться в момент когда его запросят.